@page "/Reports/ReportSummary"
@inject StagingDbContext _StagingDbContext;
 

    <container>
    <row>
        <div class="rep text-center">
            <h1>REPORT</h1>
        </div>
    </row>
    <div class="rz-border-primary-darker"><span></span>
         <RadzenTemplateForm TItem="RunReport" Data=@report Submit=@OnSubmit>
        <div class="container-fluid">
            <div class="row mt-2">
                <div class="form-group col-sm-4">
                    <label for="domain">*Domain</label>
                        <RadzenDropDown Style="Display:grid;" TValue="string" Data=@(domains.Select(domain => domain).Distinct()) Change="@OnChangeDomain" @bind-Value="report.DomainName"/>
                  
                   
                </div>

                 <div class="form-group col-sm-4">
                    <label for="Category">*Category</label>
                        <RadzenDropDown Style="Display:grid;" Name="CategoryDrop" TValue="int?" Data=@categories TextProperty="CategoryName" ValueProperty="CategoryID" Change="@OnChangeCategory" @bind-Value="report.CategoryId"/>
                    
                </div>
                <div class="form-group col-sm-4">
                    <label for="inputPassword4">Sub-Category</label>
                    <RadzenDropDown Style="Display:grid;" Name="SubCategoryDrop" TValue="int?" Data=@subCategories TextProperty="SubCategoryName" ValueProperty="SubCategoryID" @bind-Value="report.SubCategoryId"/>
                </div>
               
             </div>
            <div class="row">
                <div class="col-lg-6 col-xl-4 p-3">

                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2"  Name="StartDate" >Start Date</RadzenText>
                            <RadzenDatePicker Min="DateTime.Today.AddDays(-1095)" Max="DateTime.Today" TValue="DateTime?" @bind-Value="report.StartDate" Change=@(args => OnChange(args, "DatePicker with minimum and maximum dates", "MM/dd/yyyy")) Class="w-100" />
                    </RadzenCard>
                </div>
                <div class="col-lg-6 col-xl-4 p-3">

                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Subtitle2" Name="EndDate">End Date</RadzenText>
                            <RadzenDatePicker Min="DateTime.Today.AddDays(-1095)" Max="DateTime.Today" TValue="DateTime?" @bind-Value="report.EndDate"  Change=@(args => OnChange(args, "DatePicker with minimum and maximum dates", "MM/dd/yyyy")) Class="w-100" />
                    </RadzenCard>
                </div>


                <div class="form-group col-md-4 pt-5 px-4">

                    <div class="col-md-12 text-center">
                            
                            <RadzenButton Shade="Shade.Darker" ButtonType="ButtonType.Submit"  Text="Run Report!" ButtonStyle="ButtonStyle.Secondary" />
                        
                        
                    </div>
                            
                            
                </div>  

            </div>

        </div>
        </RadzenTemplateForm>
    </div>
    <div>
        <Columns />
    </div>
   
</container>



@code {
   


    RunReport report = new RunReport();

    void OnSubmit(RunReport report)
    {
        var domain = report.DomainName;
        var catagory = report.CategoryId;
        var subcatagory = report.SubCategoryId;
        var startdate = report.StartDate;
        var enddate = report.EndDate;
       
        //StoredReport storedReport1 = new StoredReport();
        //{
        //    // check if exists

        //       //storedReport1.StoredDomainId = report.DomainName
                
        //       storedReport1.StoredCatagoryId = report.CategoryId;
        //        storedReport1.StoredSubCatagoryId= report.SubCategoryId;
        //        // create stored report name = domain + category + sub category name LINQ
        //        // need to add a times used column 
        //}

    }

    IEnumerable<String> domains;
    IEnumerable<Category> categories;
    IEnumerable<SubCategory> subCategories;
    protected override void OnInitialized()
    {
        domains = new List<String>
        {
            "W5",
            "Arena",
            "Giants",
            "Car Park"
        };

        //categories = _StagingDBContext.Categories.ToList();
        //subCategories = _StagingDBContext.SubCategories.ToList();

    }


    void OnChangeDomain(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"Value changed to {str}");
    }
    
    void OnChangeCategory(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"Value changed to {str}");
    }

  
    bool busy;

    void OnClick(string buttonname)
    {
        
    
    }

    async Task OnBusyClick()
    {
        busy = true;
        await Task.Delay(2000);
        busy = false;
    }
    
    DateTime? value = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

  

    void OnChange(DateTime? value, string StartDate, string format)
    {
      //  console.Log($"{name} value changed to {value?.ToString(format)}");
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value = DateTime.Now;
    }
}
