@page "/Reports/ChartView"
@using OTBIS.Web.Services

@inject StagingDbcontext _StagingDbcontext;
@inject ComparedOnService _ComparedOnService;
@inject GetProductionService _getProductionService;
@inject PopulateDropdownService _populateDropdownService;




<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    Radzen Blazor Chart column series
</RadzenText>

<div class="Container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenCard Class="w-100 mb-4">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenCard>

            <h4>Auto-size column series</h4>

            <RadzenChart>
                <RadzenColumnSeries Data="@revenue2020" CategoryProperty="" Title="2020" LineType="LineType.Dashed" ValueProperty="Revenue">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenColumnSeries>
                <RadzenColumnSeries Data="@revenue2019" CategoryProperty="Quarter" Title="2019" ValueProperty="Revenue">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenColumnSeries>
                <RadzenColumnOptions Radius="5" />
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in USD" />
                </RadzenValueAxis>

            </RadzenChart>
            <h4>Custom size column series</h4>
            <RadzenChart>
                <RadzenColumnSeries Data="@revenue2020" CategoryProperty="Quarter" Title="2020" LineType="LineType.Dashed" ValueProperty="Revenue">
                    @*<RadzenSeriesDataLabels Visible="@showDataLabels" />*@
                </RadzenColumnSeries>
                <RadzenColumnSeries Data="@revenue2019" CategoryProperty="Quarter" Title="2019" ValueProperty="Revenue">
                    @*<RadzenSeriesDataLabels Visible="@showDataLabels" />*@
                </RadzenColumnSeries>
                <RadzenColumnOptions Radius="5" Width="20" />
                <RadzenCategoryAxis Padding="20" />
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in USD" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>



@code {
    TransBySubCat1 GAresult;
    TransBySubCat1 NonGAresult;
    RunReport _storedReport1;

    RunReport report = new RunReport();
    int selectedDomId = 0;
    int selectedDomId2 = 0;
    int selectedDeptId = 0;
    int selectedDeptId2 = 0;
    int selectedCatId = 0;
    int selectedCatId2 = 0;
    int selectedSubCatId = 0;
    int selectedSubCatId2 = 0;
    int selectedItemid = 0;
    int selectedItemid2 = 0;
    int selectedNominalCodeId = 0;
    int selectedNominalCodeId2 = 0;
    int selectedSellingPriceId = 0;
    int selectedSellingPriceId2 = 0;
    int selectedPaymentTypeId = 0;
    int selectedPaymentTypeId2 = 0;
    int selectedDiscountId = 0;
    int selectedDiscountId2 = 0;
    int selectedTillid = 0;
    int selectedTillid2 = 0;
    int selectedClerkId = 0;
    int selectedClerkId2 = 0;
    DateTime selectedStartDate;
    DateTime selectedEndDate;
    DateTime selectedStartDate2;
    DateTime selectedEndDate2;

    Domain _domain;

    Department _department;

    Category _category;

    SubCategory _subCategory;

   





    protected override void OnInitialized()
    {
        _domain = new Domain();

        _department = new Department();

        _category = new Category();

        _subCategory = new SubCategory();

        _storedReport1 = new RunReport();


        TransBySubCat1[] GAresult = new TransBySubCat1[]{ };
        TransBySubCat1[] NonGAresult = new TransBySubCat1[] { };
        // _domain = _populateDropdownService.GetDomainsByiD(1);



    }

    protected override async Task OnInitializedAsync()
    {

        var result = await _getProductionService.GetAllTransByDomainAsyncbyDate(_domain.DomainId, selectedStartDate, selectedEndDate);
        var result1 = await _getProductionService.TransactionBySubCatAsync(DateTime.Today.AddDays(-91), DateTime.Today.AddDays(-60), 6, 21, 40);
        TransBySubCat1[] GAresult = _getProductionService.groupTransBySubCat(result1);
        var result2 = await _getProductionService.TransactionBySubCatAsync(DateTime.Today.AddDays(-91), DateTime.Today.AddDays(-60), 6, 21, 69);
        TransBySubCat1[] NonGAresult = _getProductionService.groupTransBySubCat(result2);

    }
    string FormatAsUSD(object value)
    {
        //CultureInfo.CreateSpecificCulture("en-US")
        return ((double)value).ToString("C0", null);
    }



    //column chart data

    bool showDataLabels = false;

    //class dataitem
    //{
    //    public DateTime TransDate { get; set; }
    //    public decimal revenue { get; set; }
    //}
    
    class DataItem  
    {
        public DateTime Quarter { get; set; }
        public decimal Revenue { get; set; }
    }

    DataItem[] revenue2019 = new DataItem[] {
        new DataItem
        {
            Quarter = DateTime.Now,
            Revenue = 234000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(1),
            Revenue = 284000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(2),
            Revenue = 274000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(3),
            Revenue = 294000
        },
    };

    DataItem[] revenue2020 = new DataItem[] {
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(-1),
            Revenue = 254000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(-2),
            Revenue = 324000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(-3),
            Revenue = 354000
        },
        new DataItem
        {
            Quarter = DateTime.Now.AddDays(4),
            Revenue = 394000
        },

    };
}
